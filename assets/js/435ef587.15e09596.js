/*! For license information please see 435ef587.15e09596.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[400618],{110370:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=n(474848),i=n(28453);const s={id:"plugin-metadata",title:"Plugin Metadata Service",sidebar_label:"Plugin Metadata",description:"Documentation for the Plugin Metadata service"},a=void 0,o={id:"backend-system/core-services/plugin-metadata",title:"Plugin Metadata Service",description:"Documentation for the Plugin Metadata service",source:"@site/../docs/backend-system/core-services/plugin-metadata.md",sourceDirName:"backend-system/core-services",slug:"/backend-system/core-services/plugin-metadata",permalink:"/docs/next/backend-system/core-services/plugin-metadata",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/backend-system/core-services/plugin-metadata.md",tags:[],version:"current",frontMatter:{id:"plugin-metadata",title:"Plugin Metadata Service",sidebar_label:"Plugin Metadata",description:"Documentation for the Plugin Metadata service"},sidebar:"docs",previous:{title:"Permissions Registry",permalink:"/docs/next/backend-system/core-services/permissions-registry"},next:{title:"Root Config",permalink:"/docs/next/backend-system/core-services/root-config"}},c={},l=[{value:"Using the service",id:"using-the-service",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"This service allows you to query for metadata about the current plugin. In particular, this service is used by other plugin-scoped services, if they need to know what the ID is of the plugin that they are being instantiated for."}),"\n",(0,r.jsx)(t.h2,{id:"using-the-service",children:"Using the service"}),"\n",(0,r.jsx)(t.p,{children:'The following example shows a fake plugin-scoped service which wants to know what plugin it "belongs" to.'}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"import {\n  coreServices,\n  createServiceFactory,\n} from '@backstage/backend-plugin-api';\n\nexport const myServiceFactory = createServiceFactory({\n  service: myServiceRef,\n  deps: {\n    logger: coreServices.logger,\n    plugin: coreServices.pluginMetadata,\n  },\n  async factory({ logger, plugin }) {\n    const pluginId = plugin.getId();\n    logger.info(`Creating an instance of my service for plugin '${id}'`);\n    return ...; // TODO\n  },\n});\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},221020:(e,t,n)=>{var r=n(296540),i=Symbol.for("react.element"),s=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,o=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,c={key:!0,ref:!0,__self:!0,__source:!0};function l(e,t,n){var r,s={},l=null,d=null;for(r in void 0!==n&&(l=""+n),void 0!==t.key&&(l=""+t.key),void 0!==t.ref&&(d=t.ref),t)a.call(t,r)&&!c.hasOwnProperty(r)&&(s[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===s[r]&&(s[r]=t[r]);return{$$typeof:i,type:e,key:l,ref:d,props:s,_owner:o.current}}t.Fragment=s,t.jsx=l,t.jsxs=l},474848:(e,t,n)=>{e.exports=n(221020)},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(296540);const i={},s=r.createContext(i);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);