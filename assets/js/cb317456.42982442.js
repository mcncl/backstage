/*! For license information please see cb317456.42982442.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[810652],{305401:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var r=t(474848),i=t(28453);const o={id:"plugin-scaffolder-backend-module-gitlab.createpublishgitlabaction",title:"createPublishGitlabAction()",description:"API reference for createPublishGitlabAction()"},s=void 0,a={id:"reference/plugin-scaffolder-backend-module-gitlab.createpublishgitlabaction",title:"createPublishGitlabAction()",description:"API reference for createPublishGitlabAction()",source:"@site/versioned_docs/version-stable/reference/plugin-scaffolder-backend-module-gitlab.createpublishgitlabaction.md",sourceDirName:"reference",slug:"/reference/plugin-scaffolder-backend-module-gitlab.createpublishgitlabaction",permalink:"/docs/reference/plugin-scaffolder-backend-module-gitlab.createpublishgitlabaction",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/reference/plugin-scaffolder-backend-module-gitlab.createpublishgitlabaction.md",tags:[],version:"stable",frontMatter:{id:"plugin-scaffolder-backend-module-gitlab.createpublishgitlabaction",title:"createPublishGitlabAction()",description:"API reference for createPublishGitlabAction()"}},l={},c=[{value:"Parameters",id:"parameters",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/reference/",children:"Home"})," > ",(0,r.jsx)(n.a,{href:"/docs/reference/plugin-scaffolder-backend-module-gitlab",children:(0,r.jsx)(n.code,{children:"@backstage/plugin-scaffolder-backend-module-gitlab"})})," > ",(0,r.jsx)(n.a,{href:"/docs/reference/plugin-scaffolder-backend-module-gitlab.createpublishgitlabaction",children:(0,r.jsx)(n.code,{children:"createPublishGitlabAction"})})]}),"\n",(0,r.jsx)(n.p,{children:"Creates a new action that initializes a git repository of the content in the workspace and publishes it to GitLab."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'function createPublishGitlabAction(options: {\n    integrations: ScmIntegrationRegistry;\n    config: Config;\n}): import("@backstage/plugin-scaffolder-node").TemplateAction<{\n    repoUrl: string;\n    defaultBranch?: string;\n    repoVisibility?: "private" | "internal" | "public";\n    sourcePath?: string | boolean;\n    skipExisting?: boolean;\n    token?: string;\n    gitCommitMessage?: string;\n    gitAuthorName?: string;\n    gitAuthorEmail?: string;\n    signCommit?: boolean;\n    setUserAsOwner?: boolean;\n    topics?: string[];\n    settings?: {\n        path?: string;\n        auto_devops_enabled?: boolean;\n        ci_config_path?: string;\n        description?: string;\n        merge_method?: "merge" | "rebase_merge" | "ff";\n        squash_option?: "default_off" | "default_on" | "never" | "always";\n        topics?: string[];\n        visibility?: "private" | "internal" | "public";\n        only_allow_merge_if_all_discussions_are_resolved?: boolean;\n        only_allow_merge_if_pipeline_succeeds?: boolean;\n        allow_merge_on_skipped_pipeline?: boolean;\n    };\n    branches?: Array<{\n        name: string;\n        protect?: boolean;\n        create?: boolean;\n        ref?: string;\n    }>;\n    projectVariables?: Array<{\n        key: string;\n        value: string;\n        description?: string;\n        variable_type?: string;\n        protected?: boolean;\n        masked?: boolean;\n        raw?: boolean;\n        environment_scope?: string;\n    }>;\n}, import("@backstage/types").JsonObject, "v1">;\n'})}),"\n",(0,r.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.th,{children:["\n",(0,r.jsx)(n.p,{children:"Parameter"}),"\n"]}),(0,r.jsxs)(n.th,{children:["\n",(0,r.jsx)(n.p,{children:"Type"}),"\n"]}),(0,r.jsxs)(n.th,{children:["\n",(0,r.jsx)(n.p,{children:"Description"}),"\n"]})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["\n",(0,r.jsx)(n.p,{children:"options"}),"\n"]}),(0,r.jsxs)(n.td,{children:["\n",(0,r.jsxs)(n.p,{children:["{ integrations: ",(0,r.jsx)(n.a,{href:"/docs/reference/integration.scmintegrationregistry",children:"ScmIntegrationRegistry"}),"; config: ",(0,r.jsx)(n.a,{href:"/docs/reference/config.config",children:"Config"}),"; }"]}),"\n"]}),(0,r.jsx)(n.td,{children:"\n"})]})})]}),"\n**Returns:**\n",(0,r.jsxs)(n.p,{children:['import("@backstage/plugin-scaffolder-node").',(0,r.jsx)(n.a,{href:"/docs/reference/plugin-scaffolder-node.templateaction",children:"TemplateAction"}),'<{ repoUrl: string; defaultBranch?: string; repoVisibility?: "private" | "internal" | "public"; sourcePath?: string | boolean; skipExisting?: boolean; token?: string; gitCommitMessage?: string; gitAuthorName?: string; gitAuthorEmail?: string; signCommit?: boolean; setUserAsOwner?: boolean; topics?: string[]; settings?: { path?: string; auto_devops_enabled?: boolean; ci_config_path?: string; description?: string; merge_method?: "merge" | "rebase_merge" | "ff"; squash_option?: "default_off" | "default_on" | "never" | "always"; topics?: string[]; visibility?: "private" | "internal" | "public"; only_allow_merge_if_all_discussions_are_resolved?: boolean; only_allow_merge_if_pipeline_succeeds?: boolean; allow_merge_on_skipped_pipeline?: boolean; }; branches?: Array<{ name: string; protect?: boolean; create?: boolean; ref?: string; }>; projectVariables?: Array<{ key: string; value: string; description?: string; variable_type?: string; protected?: boolean; masked?: boolean; raw?: boolean; environment_scope?: string; }>; }, import("@backstage/types").',(0,r.jsx)(n.a,{href:"/docs/reference/types.jsonobject",children:"JsonObject"}),', "v1">']})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},221020:(e,n,t)=>{var r=t(296540),i=Symbol.for("react.element"),o=Symbol.for("react.fragment"),s=Object.prototype.hasOwnProperty,a=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,n,t){var r,o={},c=null,d=null;for(r in void 0!==t&&(c=""+t),void 0!==n.key&&(c=""+n.key),void 0!==n.ref&&(d=n.ref),n)s.call(n,r)&&!l.hasOwnProperty(r)&&(o[r]=n[r]);if(e&&e.defaultProps)for(r in n=e.defaultProps)void 0===o[r]&&(o[r]=n[r]);return{$$typeof:i,type:e,key:c,ref:d,props:o,_owner:a.current}}n.Fragment=o,n.jsx=c,n.jsxs=c},474848:(e,n,t)=>{e.exports=t(221020)},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(296540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);