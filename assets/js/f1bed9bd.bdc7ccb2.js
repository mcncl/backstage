/*! For license information please see f1bed9bd.bdc7ccb2.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[984020],{451007:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var t=a(474848),s=a(28453);const i={id:"configuring-plugin-databases",title:"Configuring Plugin Databases",description:"Guide on how to configure Backstage databases."},o=void 0,r={id:"tutorials/configuring-plugin-databases",title:"Configuring Plugin Databases",description:"Guide on how to configure Backstage databases.",source:"@site/../docs/tutorials/configuring-plugin-databases.md",sourceDirName:"tutorials",slug:"/tutorials/configuring-plugin-databases",permalink:"/docs/next/tutorials/configuring-plugin-databases",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/tutorials/configuring-plugin-databases.md",tags:[],version:"current",frontMatter:{id:"configuring-plugin-databases",title:"Configuring Plugin Databases",description:"Guide on how to configure Backstage databases."},sidebar:"docs",previous:{title:"Adding Custom Plugin to Existing Monorepo App",permalink:"/docs/next/tutorials/quickstart-app-plugin"},next:{title:"Manual Rollback using Knex",permalink:"/docs/next/tutorials/manual-knex-rollback"}},l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Dependencies",id:"dependencies",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Minimal In-Memory Configuration",id:"minimal-in-memory-configuration",level:3},{value:"PostgreSQL",id:"postgresql",level:3},{value:"Custom Database Name Prefix",id:"custom-database-name-prefix",level:3},{value:"Connection Configuration Per Plugin",id:"connection-configuration-per-plugin",level:3},{value:"PostgreSQL and SQLite 3",id:"postgresql-and-sqlite-3",level:3},{value:"Check Your Databases",id:"check-your-databases",level:2},{value:"Privileges",id:"privileges",level:3},{value:"Further Reading",id:"further-reading",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"This guide covers a variety of production persistence use cases which are\nsupported out of the box by Backstage. The database manager allows the developer\nto set the client and database connection details on a per plugin basis in\naddition to the base client and connection configuration. This means that you\ncan use a SQLite 3 in-memory database for a specific plugin whilst using\nPostgreSQL for everything else and so on."}),"\n",(0,t.jsxs)(n.p,{children:["By default, Backstage uses automatically created databases for each plugin whose\nnames follow the ",(0,t.jsx)(n.code,{children:"backstage_plugin_<pluginId>"})," pattern, e.g.\n",(0,t.jsx)(n.code,{children:"backstage_plugin_auth"}),". You can configure a different database name prefix for\nuse cases where you have multiple deployments running on a shared database\ninstance or cluster."]}),"\n",(0,t.jsxs)(n.p,{children:["With infrastructure defined as code or data (Terraform, AWS CloudFormation,\netc.), you may have database credentials which lack permissions to create new\ndatabases or you do not have control over the database names. In these\ninstances, you can set the database connection configuration on a\n",(0,t.jsx)(n.a,{href:"#connection-configuration-per-plugin",children:"per plugin basis"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Backstage supports all of these use cases with the ",(0,t.jsx)(n.code,{children:"DatabaseManager"})," provided by\n",(0,t.jsx)(n.code,{children:"@backstage/backend-common"}),". We will now cover how to use and configure\nBackstage's databases."]}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(n.h3,{id:"dependencies",children:"Dependencies"}),"\n",(0,t.jsxs)(n.p,{children:["Please ensure the appropriate database drivers are installed in your ",(0,t.jsx)(n.code,{children:"backend"}),"\npackage. If you intend to use both PostgreSQL and SQLite, you can install\nboth of them."]}),"\n",(0,t.jsx)(n.p,{children:"Install pg if you need PostgreSQL:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title="From your Backstage root directory"',children:"yarn --cwd packages/backend add pg\n"})}),"\n",(0,t.jsx)(n.p,{children:"Install SQLite 3 if you intend to set it as the client:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title="From your Backstage root directory"',children:"yarn --cwd packages/backend add better-sqlite3\n"})}),"\n",(0,t.jsx)(n.p,{children:"From an operational perspective, you only need to install drivers for clients\nthat are actively used."}),"\n",(0,t.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["You should set the base database client and connection information in your\n",(0,t.jsx)(n.code,{children:"app-config.yaml"})," (or equivalent) file. The base client and configuration is\nused as the default which is extended for each plugin with the same or unset\nclient type. If a client type is specified for a specific plugin which does not\nmatch the base client, the configuration set for the plugin will be used as is\nwithout extending the base configuration."]}),"\n",(0,t.jsxs)(n.p,{children:["Client type and configuration for plugins need to be defined under\n",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"backend.database.plugin.<pluginId>"})}),". As an example, ",(0,t.jsx)(n.code,{children:"catalog"})," is the\n",(0,t.jsx)(n.code,{children:"pluginId"})," for the catalog plugin and any configuration defined under that block\nis specific to that plugin. We will now explore more detailed example\nconfigurations below."]}),"\n",(0,t.jsx)(n.h3,{id:"minimal-in-memory-configuration",children:"Minimal In-Memory Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["In the example below, we are using ",(0,t.jsx)(n.code,{children:"better-sqlite3"})," in-memory databases for all\nplugins. You may want to use this configuration for testing or other non-durable\nuse cases."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"backend:\n  database:\n    client: better-sqlite3\n    connection: ':memory:'\n"})}),"\n",(0,t.jsx)(n.h3,{id:"postgresql",children:"PostgreSQL"}),"\n",(0,t.jsxs)(n.p,{children:["The example below uses PostgreSQL (",(0,t.jsx)(n.code,{children:"pg"}),") as the database client for all plugins.\nThe ",(0,t.jsx)(n.code,{children:"auth"})," plugin uses a user defined database name instead of the automatically\ngenerated one which would have been ",(0,t.jsx)(n.code,{children:"backstage_plugin_auth"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"backend:\n  database:\n    client: pg\n    connection:\n      host: some.example-pg-instance.tld\n      user: postgres\n      password: password\n      port: 5432\n    plugin:\n      auth:\n        connection:\n          database: pg_auth_set_by_user\n"})}),"\n",(0,t.jsx)(n.h3,{id:"custom-database-name-prefix",children:"Custom Database Name Prefix"}),"\n",(0,t.jsxs)(n.p,{children:["The configuration below uses ",(0,t.jsx)(n.code,{children:"example_prefix_"})," as the database name prefix\ninstead of ",(0,t.jsx)(n.code,{children:"backstage_plugin_"}),". Plugins such as ",(0,t.jsx)(n.code,{children:"auth"})," and ",(0,t.jsx)(n.code,{children:"catalog"})," will use\ndatabases named ",(0,t.jsx)(n.code,{children:"example_prefix_auth"})," and ",(0,t.jsx)(n.code,{children:"example_prefix_catalog"})," respectively."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"backend:\n  database:\n    client: pg\n    connection:\n      host: some.example-pg-instance.tld\n      user: postgres\n      password: password\n      port: 5432\n    prefix: 'example_prefix_'\n"})}),"\n",(0,t.jsx)(n.h3,{id:"connection-configuration-per-plugin",children:"Connection Configuration Per Plugin"}),"\n",(0,t.jsxs)(n.p,{children:["Both ",(0,t.jsx)(n.code,{children:"auth"})," and ",(0,t.jsx)(n.code,{children:"catalog"})," use connection configuration with different\ncredentials and database names. This type of configuration can be useful for\nenvironments with infrastructure as code or data which may provide randomly\ngenerated credentials and/or database names."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"backend:\n  database:\n    client: pg\n    connection: 'postgresql://some.example-pg-instance.tld:5432'\n    plugin:\n      auth:\n        connection: 'postgresql://fort:knox@some.example-pg-instance.tld:5432/unwitting_fox_jumps'\n      catalog:\n        connection: 'postgresql://bank:reserve@some.example-pg-instance.tld:5432/shuffle_ransack_playback'\n"})}),"\n",(0,t.jsx)(n.h3,{id:"postgresql-and-sqlite-3",children:"PostgreSQL and SQLite 3"}),"\n",(0,t.jsxs)(n.p,{children:["The example below uses PostgreSQL (",(0,t.jsx)(n.code,{children:"pg"}),") as the database client for all plugins\nexcept the ",(0,t.jsx)(n.code,{children:"auth"})," plugin which uses ",(0,t.jsx)(n.code,{children:"better-sqlite3"}),". As the ",(0,t.jsx)(n.code,{children:"auth"})," plugin's client\ntype is different from the base client type, the connection configuration for\n",(0,t.jsx)(n.code,{children:"auth"})," is used verbatim without extending the base configuration for PostgreSQL."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"backend:\n  database:\n    client: pg\n    connection: 'postgresql://foo:bar@some.example-pg-instance.tld:5432'\n    plugin:\n      auth:\n        client: better-sqlite3\n        connection: ':memory:'\n"})}),"\n",(0,t.jsx)(n.h2,{id:"check-your-databases",children:"Check Your Databases"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"DatabaseManager"})," will attempt to create the databases if they do not exist.\nIf you have set credentials per plugin because the credentials in the base\nconfiguration do not have permissions to create databases, you must ensure they\nexist before starting the service. The service will not be able to create them,\nit can only use them."]}),"\n",(0,t.jsx)(n.h3,{id:"privileges",children:"Privileges"}),"\n",(0,t.jsx)(n.p,{children:"As Backstage attempts to check if the database exists, you may need to grant\nprivileges to list or show databases for a given user. For PostgreSQL, you would\ngrant the following:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-postgres",children:"GRANT SELECT ON pg_database TO some_user;\n"})}),"\n",(0,t.jsx)(n.p,{children:"MySQL:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-mysql",children:"GRANT SHOW DATABASES ON *.* TO some_user;\n"})}),"\n",(0,t.jsx)(n.p,{children:"The mechanisms in this guide should help you tackle different database\ndeployment situations. Good luck!"}),"\n",(0,t.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,t.jsx)(n.p,{children:"If you want to read more about the database configuration, here are some helpful links:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/next/tutorials/manual-knex-rollback",children:"Manual Knex Rollback"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"http://knexjs.org/",children:"Read more about Knex"}),", the database wrapper that we use."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.a,{href:"https://www.pgadmin.org/",children:["Install ",(0,t.jsx)(n.code,{children:"pgAdmin"})," 4"]}),", a helpful tool for querying your database."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},221020:(e,n,a)=>{var t=a(296540),s=Symbol.for("react.element"),i=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,r=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,n,a){var t,i={},c=null,d=null;for(t in void 0!==a&&(c=""+a),void 0!==n.key&&(c=""+n.key),void 0!==n.ref&&(d=n.ref),n)o.call(n,t)&&!l.hasOwnProperty(t)&&(i[t]=n[t]);if(e&&e.defaultProps)for(t in n=e.defaultProps)void 0===i[t]&&(i[t]=n[t]);return{$$typeof:s,type:e,key:c,ref:d,props:i,_owner:r.current}}n.Fragment=i,n.jsx=c,n.jsxs=c},474848:(e,n,a)=>{e.exports=a(221020)},28453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>r});var t=a(296540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);