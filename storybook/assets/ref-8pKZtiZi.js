const r="default",d="backstage.io/edit-url";function c(e){let n=e.indexOf(":");const t=e.indexOf("/");t!==-1&&t<n&&(n=-1);const a=n===-1?void 0:e.slice(0,n),s=t===-1?void 0:e.slice(n+1,t),o=e.slice(Math.max(n+1,t+1));if(a===""||s===""||o==="")throw new TypeError(`Entity reference "${e}" was not on the form [<kind>:][<namespace>/]<name>`);return{kind:a,namespace:s,name:o}}function l(e){return{kind:e.kind,namespace:e.metadata.namespace||r,name:e.metadata.name}}function p(e,n){if(!e)throw new Error("Entity reference must not be empty");const t=n==null?void 0:n.defaultKind,a=r;let s,o,m;if(typeof e=="string"){const i=c(e);s=i.kind??t,o=i.namespace??a,m=i.name}else s=e.kind??t,o=e.namespace??a,m=e.name;if(s)if(o){if(!m){const i=JSON.stringify(e);throw new Error(`Entity reference ${i} had missing or empty name`)}}else{const i=JSON.stringify(e);throw new Error(`Entity reference ${i} had missing or empty namespace`)}else{const i=JSON.stringify(e);throw new Error(`Entity reference ${i} had missing or empty kind (e.g. did not start with "component:" or similar)`)}return{kind:s,namespace:o,name:m}}function u(e){let n,t,a;return"metadata"in e?(n=e.kind,t=e.metadata.namespace??r,a=e.metadata.name):(n=e.kind,t=e.namespace??r,a=e.name),`${n.toLocaleLowerCase("en-US")}:${t.toLocaleLowerCase("en-US")}/${a.toLocaleLowerCase("en-US")}`}export{d as A,r as D,l as g,p,u as s};
